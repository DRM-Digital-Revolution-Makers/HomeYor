import React, { useState } from "react";
import { useNavigate, Link } from "@tanstack/react-router";
import { supabase } from "@/lib/supabaseClient";
import VectorLogo from "@/assets/logo/Vector.svg";

export default function Signup() {
  const navigate = useNavigate();
  const [first, setFirst] = useState("");
  const [last, setLast] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [info, setInfo] = useState<string | null>(null);

  const isEmail = (v: string) => /.+@.+\..+/.test(v);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setInfo(null);
    if (!first.trim() || !last.trim()) {
      setError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é");
      return;
    }
    if (!isEmail(email)) {
      setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
      return;
    }
    if (!password || password.length < 6) {
      setError("–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ");
      return;
    }
    if (password !== confirm) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }
    if (!supabase) {
      setError("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
      return;
    }
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: window.location.origin + "/auth/login",
          data: { first_name: first.trim(), last_name: last.trim() },
        },
      });
      if (error) throw error;
      if (data.session) {
        // Email confirmation disabled -> session returned immediately
        navigate({ to: "/" });
      } else {
        // Typical case: email confirmation required
        setInfo(
          "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞, –∑–∞—Ç–µ–º –≤–æ–π–¥–∏—Ç–µ."
        );
      }
    } catch (err: any) {
      setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      {/* Header */}
      <div className="fixed top-0 left-0 right-0 bg-background flex items-center justify-between px-5 py-5 rounded-e-xl">
        <div className="flex items-center gap-2">
          <img src={VectorLogo} alt="HomeYor" className="w-6 h-6" />
          <span className="font-sf text-[#000] text-[20px] font-[600]">HomeYor</span>
        </div>
        <div className="text-[#000] font-sf text-[14px]">–†—É—Å—Å–∫–∏–π üá∑üá∫</div>
      </div>

      {/* Content */}
      <form onSubmit={onSubmit} className="flex-1 px-5 pt-24 pb-24 max-w-sm mx-auto w-full" id="signupForm">
        <div className="text-center font-sf text-[20px] font-[600] text-[#000] mb-4">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email</div>

        <div className="mb-3">
          <input
            className="w-full bg-[#fff] border border-[#E5E7EB] rounded-[14px] px-3 py-3 text-base text-[#000] placeholder-[#7A7A7A] caret-[#1E90FF]"
            placeholder="–ò–º—è"
            value={first}
            onChange={(e) => setFirst(e.target.value)}
          />
        </div>
        <div className="mb-3">
          <input
            className="w-full bg-[#fff] border border-[#E5E7EB] rounded-[14px] px-3 py-3 text-base text-[#000] placeholder-[#7A7A7A] caret-[#1E90FF]"
            placeholder="–§–∞–º–∏–ª–∏—è"
            value={last}
            onChange={(e) => setLast(e.target.value)}
          />
        </div>

        <input
          type="email"
          autoComplete="email"
          className="w-full bg-[#fff] border border-[#E5E7EB] rounded-[14px] px-3 py-3 text-base text-[#000] placeholder-[#7A7A7A] caret-[#1E90FF] mb-3"
          placeholder="email@example.com"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          autoComplete="new-password"
          className="w-full bg-[#fff] border border-[#E5E7EB] rounded-[14px] px-3 py-3 text-base text-[#000] placeholder-[#7A7A7A] caret-[#1E90FF] mb-3"
          placeholder="–ü–∞—Ä–æ–ª—å"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <input
          type="password"
          autoComplete="new-password"
          className="w-full bg-[#fff] border border-[#E5E7EB] rounded-[14px] px-3 py-3 text-base text-[#000] placeholder-[#7A7A7A] caret-[#1E90FF]"
          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          value={confirm}
          onChange={(e) => setConfirm(e.target.value)}
        />
        <div className="text-[#7A7A7A] text-[12px] mt-2">
          –ù–∞–∂–∏–º–∞—è <span className="text-[#1E90FF]">¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª</span>, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏
          <span className="text-[#1E90FF]"> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</span> –∏
          <span className="text-[#1E90FF]"> –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>.
        </div>
        <div className="text-center mt-3">
          <Link to="/auth/login" className="text-[#1E90FF] font-sf text-[14px]">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏</Link>
        </div>
        {error && <div className="text-center text-red-500 text-sm mt-2">{error}</div>}
        {info && <div className="text-center text-green-600 text-sm mt-2">{info}</div>}

        {/* Spacer to avoid overlay by bottom button */}
        <div className="h-24" />
      </form>

      {/* Bottom CTA */}
      <div className="fixed bottom-0 left-0 right-0 px-5 pb-6">
        <button
          type="submit"
          form="signupForm"
          disabled={loading}
          className="w-full bg-[#1E90FF] text-white rounded-[14px] py-3 text-[16px] font-sf disabled:opacity-50"
        >
          {loading ? "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º‚Ä¶" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
        </button>
      </div>
    </div>
  );
}