import React, { useEffect, useState } from "react";
import { useNavigate } from "@tanstack/react-router";
import { supabase } from "@/lib/supabaseClient";

const Verified = () => {
  const navigate = useNavigate();
  const [phone, setPhone] = useState<string | null>(null);
  const [address, setAddress] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const loadProfile = async () => {
      const client = supabase;
      if (!client) {
        setLoading(false);
        return;
      }
      try {
        const { data: userData } = await client.auth.getUser();
        const uid = userData.user?.id;
        if (!uid) {
          setLoading(false);
          return;
        }
        const { data, error } = await client
          .from("profiles")
          .select("phone_number, address")
          .eq("id", uid)
          .maybeSingle();
        if (error) throw error;
        setPhone((data as any)?.phone_number ?? null);
        setAddress((data as any)?.address ?? null);
      } catch (e) {
        console.warn("Не удалось получить профиль:", (e as any)?.message || e);
      } finally {
        setLoading(false);
      }
    };
    loadProfile();
  }, []);

  const verified = Boolean(phone);
  const checkColor = verified ? "#1E90FF" : "#FF6B6B";

  return (
    <div className="bg-[#fff] w-full p-4 rounded-[30px] gap-3">
      <div className="flex items-center text-left">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 16 16"
          fill="none"
        >
          <path
            opacity="0.5"
            d="M6.39507 2.1337C6.23274 2.27204 6.15156 2.34122 6.06487 2.39932C5.86614 2.53252 5.64294 2.62497 5.40823 2.67131C5.30584 2.69153 5.19952 2.70001 4.98688 2.71698C4.45263 2.75961 4.1855 2.78093 3.96264 2.85965C3.44717 3.04172 3.04172 3.44717 2.85965 3.96264C2.78093 4.1855 2.75962 4.45262 2.71698 4.98688C2.70002 5.19951 2.69153 5.30584 2.67131 5.40823C2.62497 5.64294 2.53252 5.86614 2.39932 6.06487C2.34122 6.15156 2.27204 6.23274 2.13368 6.39509C1.78606 6.80302 1.61223 7.00696 1.51031 7.22023C1.27456 7.7135 1.27456 8.28683 1.51031 8.7801C1.61224 8.99336 1.78605 9.1973 2.13368 9.60523C2.272 9.76756 2.34122 9.84876 2.39932 9.93543C2.53252 10.1342 2.62497 10.3574 2.67131 10.5921C2.69153 10.6945 2.70001 10.8008 2.71698 11.0134C2.75961 11.5477 2.78093 11.8148 2.85965 12.0377C3.04172 12.5532 3.44717 12.9586 3.96264 13.1407C4.18549 13.2194 4.45261 13.2407 4.98683 13.2834C5.19946 13.3003 5.30584 13.3088 5.40823 13.329C5.64294 13.3754 5.86614 13.4678 6.06487 13.601C6.15157 13.6591 6.23274 13.7283 6.3951 13.8666C6.80303 14.2143 7.00696 14.3881 7.22023 14.49C7.7135 14.7258 8.28683 14.7258 8.7801 14.49C8.99336 14.3881 9.1973 14.2143 9.60523 13.8666C9.76756 13.7283 9.84876 13.6591 9.93543 13.601C10.1342 13.4678 10.3574 13.3754 10.5921 13.329C10.6945 13.3088 10.8008 13.3003 11.0134 13.2834C11.5476 13.2407 11.8148 13.2194 12.0377 13.1407C12.5532 12.9586 12.9586 12.5532 13.1407 12.0377C13.2194 11.8148 13.2407 11.5477 13.2834 11.0135C13.3003 10.8009 13.3088 10.6945 13.329 10.5921C13.3754 10.3574 13.4678 10.1342 13.601 9.93543C13.6591 9.84876 13.7283 9.76756 13.8666 9.60523C14.2143 9.1973 14.3881 8.99336 14.49 8.7801C14.7258 8.28683 14.7258 7.7135 14.49 7.22023C14.3881 7.00696 14.2143 6.80303 13.8666 6.3951C13.7283 6.23274 13.6591 6.15157 13.601 6.06487C13.4678 5.86614 13.3754 5.64294 13.329 5.40823C13.3088 5.30584 13.3003 5.19952 13.2834 4.98688C13.2407 4.45266 13.2194 4.18549 13.1407 3.96264C12.9586 3.44717 12.5532 3.04172 12.0377 2.85965C11.8148 2.78093 11.5477 2.75962 11.0134 2.71698C10.8008 2.70002 10.6945 2.69153 10.5921 2.67131C10.3574 2.62497 10.1342 2.53252 9.93543 2.39932C9.84876 2.34122 9.76756 2.27204 9.60523 2.13368C9.1973 1.78605 8.99336 1.61224 8.7801 1.51031C8.28683 1.27456 7.7135 1.27456 7.22023 1.51031C7.00696 1.61223 6.803 1.78608 6.39507 2.1337Z"
            fill={checkColor}
          />
          <path
            d="M10.9156 6.57516C11.1274 6.36327 11.1274 6.01973 10.9156 5.80785C10.7036 5.59595 10.3601 5.59595 10.1482 5.80785L6.9147 9.04137L5.85152 7.97811C5.63963 7.76624 5.29609 7.76624 5.08421 7.97811C4.87232 8.19004 4.87232 8.53357 5.08421 8.74544L6.53107 10.1923C6.74297 10.4042 7.0865 10.4042 7.29837 10.1923L10.9156 6.57516Z"
            fill={checkColor}
          />
        </svg>
        <span className="font-sf font-[200] text-base text-[#000] px-1">
          {verified ? "Верифицирован" : "Не верифицирован"}
        </span>
      </div>
      <h2 className="font-sf text-lg text-[#000] font-[510]">
        {address ? address : "Адрес не указан"}
      </h2>
      {!address && (
        <div className="mt-3">
          <button
            className="w-full bg-[#1E90FF] text-white rounded-[14px] py-2 text-[14px] font-sf"
            onClick={() => navigate({ to: "/profile/address" })}
          >
            Добавить адрес
          </button>
        </div>
      )}
    </div>
  );
};

export default Verified;
